// Mocks generated by Mockito 5.3.2 from annotations
// in ab_smartly/context.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i16;
import 'dart:typed_data' as _i12;

import 'package:ab_smartly/audience_matcher.dart' as _i11;
import 'package:ab_smartly/context.dart' as _i5;
import 'package:ab_smartly/context_data_provider.dart' as _i9;
import 'package:ab_smartly/context_event_handler.dart' as _i8;
import 'package:ab_smartly/context_event_logger.dart' as _i18;
import 'package:ab_smartly/helper/mutex/mutex.dart' as _i4;
import 'package:ab_smartly/helper/mutex/read_write_mutex.dart' as _i3;
import 'package:ab_smartly/internal/variant_assigner.dart' as _i7;
import 'package:ab_smartly/java/time/clock.dart' as _i2;
import 'package:ab_smartly/json/attribute.dart' as _i15;
import 'package:ab_smartly/json/context_data.dart' as _i6;
import 'package:ab_smartly/json/experiment.dart' as _i17;
import 'package:ab_smartly/json/exposure.dart' as _i13;
import 'package:ab_smartly/json/goal_achievement.dart' as _i14;
import 'package:ab_smartly/variable_parser.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClock_0 extends _i1.SmartFake implements _i2.Clock {
  _FakeClock_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReadWriteMutex_1 extends _i1.SmartFake
    implements _i3.ReadWriteMutex {
  _FakeReadWriteMutex_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMutex_2 extends _i1.SmartFake implements _i4.Mutex {
  _FakeMutex_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContext_3 extends _i1.SmartFake implements _i5.Context {
  _FakeContext_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContextData_4 extends _i1.SmartFake implements _i6.ContextData {
  _FakeContextData_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAssignment_5 extends _i1.SmartFake implements _i5.Assignment {
  _FakeAssignment_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVariantAssigner_6 extends _i1.SmartFake
    implements _i7.VariantAssigner {
  _FakeVariantAssigner_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Context].
///
/// See the documentation for Mockito's code generation for more information.
class MockContext extends _i1.Mock implements _i5.Context {
  @override
  bool get dataFutureCheck => (super.noSuchMethod(
        Invocation.getter(#dataFutureCheck),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set dataFutureCheck(bool? _dataFutureCheck) => super.noSuchMethod(
        Invocation.setter(
          #dataFutureCheck,
          _dataFutureCheck,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Clock get clock_ => (super.noSuchMethod(
        Invocation.getter(#clock_),
        returnValue: _FakeClock_0(
          this,
          Invocation.getter(#clock_),
        ),
        returnValueForMissingStub: _FakeClock_0(
          this,
          Invocation.getter(#clock_),
        ),
      ) as _i2.Clock);
  @override
  set clock_(_i2.Clock? _clock_) => super.noSuchMethod(
        Invocation.setter(
          #clock_,
          _clock_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set publishDelay_(int? _publishDelay_) => super.noSuchMethod(
        Invocation.setter(
          #publishDelay_,
          _publishDelay_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set refreshInterval_(int? _refreshInterval_) => super.noSuchMethod(
        Invocation.setter(
          #refreshInterval_,
          _refreshInterval_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set eventHandler_(_i8.ContextEventHandler? _eventHandler_) =>
      super.noSuchMethod(
        Invocation.setter(
          #eventHandler_,
          _eventHandler_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set dataProvider_(_i9.ContextDataProvider? _dataProvider_) =>
      super.noSuchMethod(
        Invocation.setter(
          #dataProvider_,
          _dataProvider_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set variableParser_(_i10.VariableParser? _variableParser_) =>
      super.noSuchMethod(
        Invocation.setter(
          #variableParser_,
          _variableParser_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set audienceMatcher_(_i11.AudienceMatcher? _audienceMatcher_) =>
      super.noSuchMethod(
        Invocation.setter(
          #audienceMatcher_,
          _audienceMatcher_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set units_(Map<String, String>? _units_) => super.noSuchMethod(
        Invocation.setter(
          #units_,
          _units_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set failed_(bool? _failed_) => super.noSuchMethod(
        Invocation.setter(
          #failed_,
          _failed_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.ReadWriteMutex get dataLock_ => (super.noSuchMethod(
        Invocation.getter(#dataLock_),
        returnValue: _FakeReadWriteMutex_1(
          this,
          Invocation.getter(#dataLock_),
        ),
        returnValueForMissingStub: _FakeReadWriteMutex_1(
          this,
          Invocation.getter(#dataLock_),
        ),
      ) as _i3.ReadWriteMutex);
  @override
  set data_(_i6.ContextData? _data_) => super.noSuchMethod(
        Invocation.setter(
          #data_,
          _data_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set index_(Map<String, _i5.ExperimentVariables>? _index_) =>
      super.noSuchMethod(
        Invocation.setter(
          #index_,
          _index_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set indexVariables_(
          Map<String, List<_i5.ExperimentVariables>>? _indexVariables_) =>
      super.noSuchMethod(
        Invocation.setter(
          #indexVariables_,
          _indexVariables_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.ReadWriteMutex get contextLock_ => (super.noSuchMethod(
        Invocation.getter(#contextLock_),
        returnValue: _FakeReadWriteMutex_1(
          this,
          Invocation.getter(#contextLock_),
        ),
        returnValueForMissingStub: _FakeReadWriteMutex_1(
          this,
          Invocation.getter(#contextLock_),
        ),
      ) as _i3.ReadWriteMutex);
  @override
  Map<String, _i12.Uint8List> get hashedUnits_ => (super.noSuchMethod(
        Invocation.getter(#hashedUnits_),
        returnValue: <String, _i12.Uint8List>{},
        returnValueForMissingStub: <String, _i12.Uint8List>{},
      ) as Map<String, _i12.Uint8List>);
  @override
  set hashedUnits_(Map<String, _i12.Uint8List>? _hashedUnits_) =>
      super.noSuchMethod(
        Invocation.setter(
          #hashedUnits_,
          _hashedUnits_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, _i7.VariantAssigner> get assigners_ => (super.noSuchMethod(
        Invocation.getter(#assigners_),
        returnValue: <String, _i7.VariantAssigner>{},
        returnValueForMissingStub: <String, _i7.VariantAssigner>{},
      ) as Map<String, _i7.VariantAssigner>);
  @override
  set assigners_(Map<String, _i7.VariantAssigner>? _assigners_) =>
      super.noSuchMethod(
        Invocation.setter(
          #assigners_,
          _assigners_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, _i5.Assignment> get assignmentCache_ => (super.noSuchMethod(
        Invocation.getter(#assignmentCache_),
        returnValue: <String, _i5.Assignment>{},
        returnValueForMissingStub: <String, _i5.Assignment>{},
      ) as Map<String, _i5.Assignment>);
  @override
  _i4.Mutex get eventLock_ => (super.noSuchMethod(
        Invocation.getter(#eventLock_),
        returnValue: _FakeMutex_2(
          this,
          Invocation.getter(#eventLock_),
        ),
        returnValueForMissingStub: _FakeMutex_2(
          this,
          Invocation.getter(#eventLock_),
        ),
      ) as _i4.Mutex);
  @override
  List<_i13.Exposure> get exposures_ => (super.noSuchMethod(
        Invocation.getter(#exposures_),
        returnValue: <_i13.Exposure>[],
        returnValueForMissingStub: <_i13.Exposure>[],
      ) as List<_i13.Exposure>);
  @override
  List<_i14.GoalAchievement> get achievements_ => (super.noSuchMethod(
        Invocation.getter(#achievements_),
        returnValue: <_i14.GoalAchievement>[],
        returnValueForMissingStub: <_i14.GoalAchievement>[],
      ) as List<_i14.GoalAchievement>);
  @override
  List<_i15.Attribute> get attributes_ => (super.noSuchMethod(
        Invocation.getter(#attributes_),
        returnValue: <_i15.Attribute>[],
        returnValueForMissingStub: <_i15.Attribute>[],
      ) as List<_i15.Attribute>);
  @override
  Map<String, int> get overrides_ => (super.noSuchMethod(
        Invocation.getter(#overrides_),
        returnValue: <String, int>{},
        returnValueForMissingStub: <String, int>{},
      ) as Map<String, int>);
  @override
  set overrides_(Map<String, int>? _overrides_) => super.noSuchMethod(
        Invocation.setter(
          #overrides_,
          _overrides_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, int> get cassignments_ => (super.noSuchMethod(
        Invocation.getter(#cassignments_),
        returnValue: <String, int>{},
        returnValueForMissingStub: <String, int>{},
      ) as Map<String, int>);
  @override
  set cassignments_(Map<String, int>? _cassignments_) => super.noSuchMethod(
        Invocation.setter(
          #cassignments_,
          _cassignments_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get pendingCount_ => (super.noSuchMethod(
        Invocation.getter(#pendingCount_),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set pendingCount_(int? _pendingCount_) => super.noSuchMethod(
        Invocation.setter(
          #pendingCount_,
          _pendingCount_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get closing_ => (super.noSuchMethod(
        Invocation.getter(#closing_),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set closing_(bool? _closing_) => super.noSuchMethod(
        Invocation.setter(
          #closing_,
          _closing_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get closed_ => (super.noSuchMethod(
        Invocation.getter(#closed_),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set closed_(bool? _closed_) => super.noSuchMethod(
        Invocation.setter(
          #closed_,
          _closed_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get refreshing_ => (super.noSuchMethod(
        Invocation.getter(#refreshing_),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set refreshing_(bool? _refreshing_) => super.noSuchMethod(
        Invocation.setter(
          #refreshing_,
          _refreshing_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set readyFuture_(_i16.Completer<void>? _readyFuture_) => super.noSuchMethod(
        Invocation.setter(
          #readyFuture_,
          _readyFuture_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set closingFuture_(_i16.Completer<void>? _closingFuture_) =>
      super.noSuchMethod(
        Invocation.setter(
          #closingFuture_,
          _closingFuture_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set refreshFuture_(_i16.Completer<void>? _refreshFuture_) =>
      super.noSuchMethod(
        Invocation.setter(
          #refreshFuture_,
          _refreshFuture_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Mutex get timeoutLock_ => (super.noSuchMethod(
        Invocation.getter(#timeoutLock_),
        returnValue: _FakeMutex_2(
          this,
          Invocation.getter(#timeoutLock_),
        ),
        returnValueForMissingStub: _FakeMutex_2(
          this,
          Invocation.getter(#timeoutLock_),
        ),
      ) as _i4.Mutex);
  @override
  set timeout_(_i16.Timer? _timeout_) => super.noSuchMethod(
        Invocation.setter(
          #timeout_,
          _timeout_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set refreshTimer_(_i16.Timer? _refreshTimer_) => super.noSuchMethod(
        Invocation.setter(
          #refreshTimer_,
          _refreshTimer_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set scheduler_(_i16.Timer? _scheduler_) => super.noSuchMethod(
        Invocation.setter(
          #scheduler_,
          _scheduler_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isReady() => (super.noSuchMethod(
        Invocation.method(
          #isReady,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isFailed() => (super.noSuchMethod(
        Invocation.method(
          #isFailed,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isClosed() => (super.noSuchMethod(
        Invocation.method(
          #isClosed,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isClosing() => (super.noSuchMethod(
        Invocation.method(
          #isClosing,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i16.Future<_i5.Context> waitUntilReadyAsync() => (super.noSuchMethod(
        Invocation.method(
          #waitUntilReadyAsync,
          [],
        ),
        returnValue: _i16.Future<_i5.Context>.value(_FakeContext_3(
          this,
          Invocation.method(
            #waitUntilReadyAsync,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i5.Context>.value(_FakeContext_3(
          this,
          Invocation.method(
            #waitUntilReadyAsync,
            [],
          ),
        )),
      ) as _i16.Future<_i5.Context>);
  @override
  _i16.Future<_i5.Context> waitUntilReady() => (super.noSuchMethod(
        Invocation.method(
          #waitUntilReady,
          [],
        ),
        returnValue: _i16.Future<_i5.Context>.value(_FakeContext_3(
          this,
          Invocation.method(
            #waitUntilReady,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i5.Context>.value(_FakeContext_3(
          this,
          Invocation.method(
            #waitUntilReady,
            [],
          ),
        )),
      ) as _i16.Future<_i5.Context>);
  @override
  _i16.Future<List<String>> getExperiments() => (super.noSuchMethod(
        Invocation.method(
          #getExperiments,
          [],
        ),
        returnValue: _i16.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i16.Future<List<String>>.value(<String>[]),
      ) as _i16.Future<List<String>>);
  @override
  _i6.ContextData getData() => (super.noSuchMethod(
        Invocation.method(
          #getData,
          [],
        ),
        returnValue: _FakeContextData_4(
          this,
          Invocation.method(
            #getData,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeContextData_4(
          this,
          Invocation.method(
            #getData,
            [],
          ),
        ),
      ) as _i6.ContextData);
  @override
  void setOverride(
    String? experimentName,
    int? variant,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setOverride,
          [
            experimentName,
            variant,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  int getOverride(String? experimentName) => (super.noSuchMethod(
        Invocation.method(
          #getOverride,
          [experimentName],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  void setOverrides(Map<String, int>? overrides) => super.noSuchMethod(
        Invocation.method(
          #setOverrides,
          [overrides],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setCustomAssignment(
    String? experimentName,
    int? variant,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomAssignment,
          [
            experimentName,
            variant,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  int getCustomAssignment(String? experimentName) => (super.noSuchMethod(
        Invocation.method(
          #getCustomAssignment,
          [experimentName],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  void setCustomAssignments(Map<String, int>? customAssignments) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomAssignments,
          [customAssignments],
        ),
        returnValueForMissingStub: null,
      );
  @override
  String? getUnit(String? unitType) => (super.noSuchMethod(
        Invocation.method(
          #getUnit,
          [unitType],
        ),
        returnValueForMissingStub: null,
      ) as String?);
  @override
  void setUnit(
    String? unitType,
    String? uid,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setUnit,
          [
            unitType,
            uid,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, String> getUnits() => (super.noSuchMethod(
        Invocation.method(
          #getUnits,
          [],
        ),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
  @override
  void setUnits(Map<String, String>? units) => super.noSuchMethod(
        Invocation.method(
          #setUnits,
          [units],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic getAttribute(String? name) => super.noSuchMethod(
        Invocation.method(
          #getAttribute,
          [name],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setAttribute(
    String? name,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setAttribute,
          [
            name,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, dynamic> getAttributes() => (super.noSuchMethod(
        Invocation.method(
          #getAttributes,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
  @override
  void setAttributes(Map<String, dynamic>? attributes) => super.noSuchMethod(
        Invocation.method(
          #setAttributes,
          [attributes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i16.Future<int> getTreatment(String? experimentName) => (super.noSuchMethod(
        Invocation.method(
          #getTreatment,
          [experimentName],
        ),
        returnValue: _i16.Future<int>.value(0),
        returnValueForMissingStub: _i16.Future<int>.value(0),
      ) as _i16.Future<int>);
  @override
  void queueExposure(_i5.Assignment? assignment) => super.noSuchMethod(
        Invocation.method(
          #queueExposure,
          [assignment],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i16.Future<int> peekTreatment(String? experimentName) => (super.noSuchMethod(
        Invocation.method(
          #peekTreatment,
          [experimentName],
        ),
        returnValue: _i16.Future<int>.value(0),
        returnValueForMissingStub: _i16.Future<int>.value(0),
      ) as _i16.Future<int>);
  @override
  Map<String, List<String>> getVariableKeys() => (super.noSuchMethod(
        Invocation.method(
          #getVariableKeys,
          [],
        ),
        returnValue: <String, List<String>>{},
        returnValueForMissingStub: <String, List<String>>{},
      ) as Map<String, List<String>>);
  @override
  dynamic getVariableValue(
    String? key,
    dynamic defaultValue,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #getVariableValue,
          [
            key,
            defaultValue,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i16.Future<dynamic> peekVariableValue(
    String? key,
    dynamic defaultValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #peekVariableValue,
          [
            key,
            defaultValue,
          ],
        ),
        returnValue: _i16.Future<dynamic>.value(),
        returnValueForMissingStub: _i16.Future<dynamic>.value(),
      ) as _i16.Future<dynamic>);
  @override
  void track(
    String? goalName,
    Map<String, dynamic>? properties,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #track,
          [
            goalName,
            properties,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i16.Future<void> publishAsync() => (super.noSuchMethod(
        Invocation.method(
          #publishAsync,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> publish() => (super.noSuchMethod(
        Invocation.method(
          #publish,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  int getPendingCount() => (super.noSuchMethod(
        Invocation.method(
          #getPendingCount,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i16.Future<void> refreshAsync() => (super.noSuchMethod(
        Invocation.method(
          #refreshAsync,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> closeAsync() => (super.noSuchMethod(
        Invocation.method(
          #closeAsync,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<Future<void>> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<Future<void>>.value(),
      ) as _i16.Future<Future<void>>);
  @override
  void checkNotClosed() => super.noSuchMethod(
        Invocation.method(
          #checkNotClosed,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void checkReady(bool? expectNotClosed) => super.noSuchMethod(
        Invocation.method(
          #checkReady,
          [expectNotClosed],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool experimentMatches(
    _i17.Experiment? experiment,
    _i5.Assignment? assignment,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #experimentMatches,
          [
            experiment,
            assignment,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i16.Future<_i5.Assignment> getAssignment(String? experimentName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAssignment,
          [experimentName],
        ),
        returnValue: _i16.Future<_i5.Assignment>.value(_FakeAssignment_5(
          this,
          Invocation.method(
            #getAssignment,
            [experimentName],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i5.Assignment>.value(_FakeAssignment_5(
          this,
          Invocation.method(
            #getAssignment,
            [experimentName],
          ),
        )),
      ) as _i16.Future<_i5.Assignment>);
  @override
  _i16.Future<_i5.Assignment?> getVariableAssignment(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVariableAssignment,
          [key],
        ),
        returnValue: _i16.Future<_i5.Assignment?>.value(),
        returnValueForMissingStub: _i16.Future<_i5.Assignment?>.value(),
      ) as _i16.Future<_i5.Assignment?>);
  @override
  _i5.ExperimentVariables? getExperiment(String? experimentName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExperiment,
          [experimentName],
        ),
        returnValueForMissingStub: null,
      ) as _i5.ExperimentVariables?);
  @override
  List<_i5.ExperimentVariables>? getVariableExperiments(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVariableExperiments,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as List<_i5.ExperimentVariables>?);
  @override
  _i16.Future<_i12.Uint8List> getUnitHash(
    String? unitType,
    String? unitUID,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUnitHash,
          [
            unitType,
            unitUID,
          ],
        ),
        returnValue: _i16.Future<_i12.Uint8List>.value(_i12.Uint8List(0)),
        returnValueForMissingStub:
            _i16.Future<_i12.Uint8List>.value(_i12.Uint8List(0)),
      ) as _i16.Future<_i12.Uint8List>);
  @override
  _i16.Future<_i7.VariantAssigner> getVariantAssigner(
    String? unitType,
    _i12.Uint8List? unitHash,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVariantAssigner,
          [
            unitType,
            unitHash,
          ],
        ),
        returnValue:
            _i16.Future<_i7.VariantAssigner>.value(_FakeVariantAssigner_6(
          this,
          Invocation.method(
            #getVariantAssigner,
            [
              unitType,
              unitHash,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i7.VariantAssigner>.value(_FakeVariantAssigner_6(
          this,
          Invocation.method(
            #getVariantAssigner,
            [
              unitType,
              unitHash,
            ],
          ),
        )),
      ) as _i16.Future<_i7.VariantAssigner>);
  @override
  void setTimeout() => super.noSuchMethod(
        Invocation.method(
          #setTimeout,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clearTimeout() => super.noSuchMethod(
        Invocation.method(
          #clearTimeout,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setRefreshTimer() => super.noSuchMethod(
        Invocation.method(
          #setRefreshTimer,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clearRefreshTimer() => super.noSuchMethod(
        Invocation.method(
          #clearRefreshTimer,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setData(_i6.ContextData? data) => super.noSuchMethod(
        Invocation.method(
          #setData,
          [data],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setDataFailed(dynamic exception) => super.noSuchMethod(
        Invocation.method(
          #setDataFailed,
          [exception],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void logEvent(
    _i18.EventType? event,
    dynamic data,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #logEvent,
          [
            event,
            data,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void logError(dynamic error) => super.noSuchMethod(
        Invocation.method(
          #logError,
          [error],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool areListsEqual(
    dynamic list1,
    dynamic list2,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #areListsEqual,
          [
            list1,
            list2,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
